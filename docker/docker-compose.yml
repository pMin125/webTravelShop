version: '3.9'

services:
  docker-mysql-db-1:
    image: mysql:5.7
    restart: always
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: toy
      MYSQL_DATABASE: toy-db
      MYSQL_USER: toy-user
      MYSQL_PASSWORD: toy1
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  redis:
    image: redis:6.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  spring-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    env_file:
    - ../backend/.env
    container_name: spring-backend
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - docker-mysql-db-1
      - redis
    environment:
      SPRING_PROFILES_ACTIVE: default

  spring-backend2:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: spring-backend2
    ports:
      - "8081:8080"  # (테스트용 외부 확인용 포트, 안 써도 OK)
    environment:
      SPRING_PROFILES_ACTIVE: server2
    depends_on:
      - docker-mysql-db-1
      - redis

  frontend:
    build:
      context: ../frontend
    container_name: frontend
    restart: always
    depends_on:
      - spring-backend

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - frontend
      - spring-backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ../frontend/build:/usr/share/nginx/html:ro

volumes:
  mysql_data:
    driver: local
